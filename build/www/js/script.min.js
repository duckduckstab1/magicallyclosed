// GOD SAVE THE KING

"use strict";

function Agent(name, args) {
    if (name && args) {
        var defaultSize = { x: 200, y: 160 };
        (this.size = args.size || defaultSize || { x: 200, y: 160 }),
            (this.overlayOffset = { left: 0, top: 0 }),
            args.size.x !== defaultSize.x && (this.overlayOffset.left = parseInt(((defaultSize.x - this.size.x) / 2).toFixed(2), 10)),
            args.size.y !== defaultSize.y && (this.overlayOffset.top = parseInt(((defaultSize.y - this.size.y) / 2).toFixed(2), 10)),
            (this.name = name.trim()),
            (this.slug = this.name.toLowerCase()),
            (this.src = `/img/bonzi/${this.slug}${(window.environment, "")}.png`),
            "clippy" !== this.slug && (this.src = `/img/bonzi/${this.slug}.png`),
            "bonzi" === this.slug && (this.src = "/img/bonzi/purple.png"),
            (args.frameSize = args.frameSize || (args.sprite && args.sprite.frames) || { width: 200, height: 160 }),
            (this.size = this.size || args.frameSize),
            (this.extras = this.extras || {}),
            (this.frames = args.frameSize || this.size),
            (this.ticks = args.ticks || (args.sprite && args.sprite.ticks) || {}),
            (this.animations = args.animations || (args.sprite && args.sprite.animations) || {});
    }
}
function BZWAgents() {
    this._agents = [];
}
$(function () {
    $(window).on("load", updateAds), $(window).resize(updateAds), $("body").on("DOMNodeInserted", adElement, updateAds), $("body").on("DOMNodeRemoved", adElement, updateAds);
}),
    console.log("Loading All Agents"),
    (Agent.prototype.getTicks = function (animation, def) {
        return isNaN(def) && !def && (def = 15), animation && this.ticks ? (this.animations[animation] && this.animations[animation].ticks ? this.animations[animation].ticks : _.get(this, `ticks.${animation}`, 15)) : def;
    }),
    (BZWAgents.prototype.addAgent = function (agent) {
        agent && (this._agents.push(agent), (this[agent.name] = agent));
    }),
    (BZWAgents.prototype.getAgent = function (name) {
        if (name) { 
            return (
                ["purple",
                "blue",
                "green", 
                "red",
                "black",
                "brown",
                "orange",
                "yellow",
                "white",
                "ghost",
                "grey",
                "god",
                "dark_purple",
                "dark_red",
                "lime",
                "magenta",
                "lemon",
                "cyan",
                "pink",
                "clippy",
                "genie",
                "merlin",
                "program",
                "clippypope",
                "red_clippy",
                "rover",
                "max",
                "peedy",
                "dogpope",
                "peedy_pope",
                "robby"].includes(name.toLowerCase()) && (name = "Bonzi"),
                _.find(this._agents, function (agent) {
                    return name.toLowerCase() === agent.slug;
                }) || this.Bonzi
            );
        }
    }),
    (BZWAgents.prototype.getAgents = function () {
        return this._agents || [];
    }),
    (window.bzwAgents = window.bzwAgents || new BZWAgents());
    
var dtv = new Agent("Dtv", {
    size: { x: 128, y: 80 },
    frameSize: { width: 128, height: 80 },
    extras: { nameplateOffset: 15 },
    animations: {
        idle: 0,
        surf_away: { frames: range(0, 0), next: "gone", ticks: 52, speed: 1},
        surf_intro: { frames: range(0, 0), next: "idle", ticks: 25, speed: 1},
        gone: 0,
    },
});
window.bzwAgents.addAgent(dtv);
const savedDefault = {
	blockedNames: [],
	aliases: {
		"bn": "blockname",
		"clr": "clear",
		"cls": "clear",
	},
	settings: {
		typing: {
			name: "Typing Indicator",
			value: true,
		},
		images: {
			name: "Show Images",
			value: true,
		},
		videos: {
			name: "Show Videos",
			value: true,
		},
		phonemes: {
			name: "Enable IPA Phonemes",
			value: false,
		},
		expiremental: {
			name: "Expiremental Mode",
			value: false,
		}
	}
}
const saved = JSON.parse(localStorage.getItem("saved") || JSON.stringify(savedDefault));
setInterval(function () {
	if(!autosave) return;
	localStorage.setItem("saved", JSON.stringify(saved));
}, 1000);
const settings = saved.settings; // WILL SAVE

// seamus please add localstorage saving to this.
function select_language(language) {
    $("[lang]").each(function () {
        if ($(this).attr("lang") == language)
            $(this).show();
        else
            $(this).hide();
    });
}
var admin = false
function updateAds() {
    var a = $(window).height() - $(adElement).height(),
        b = a <= 250;
    b && (a = $(window).height()), $(adElement)[b ? "hide" : "show"](), $("#content").height(a);
}
function _classCallCheck(a, b) {
    if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
}
function range(a, b) {
    for (var c = [], d = a; d <= b; d++) c.push(d);
    for (var d = a; d >= b; d--) c.push(d);
    return c;
}
function replaceAll(a, b, c) {
    return a.replace(new RegExp(b, "g"), c);
}
function s4() {
    return Math.floor(65536 * (1 + Math.random()))
        .toString(16)
        .substring(1);
}
function youtubeParser(a) {
    var b = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*/,
        c = a.match(b);
    return !(!c || 11 != c[7].length) && c[7];
}
function rtimeOut(a, b) {
    var c,
        d = Date.now,
        e = window.requestAnimationFrame,
        f = d(),
        g = function () {
            d() - f < b ? c || e(g) : a();
        };
    return (
        e(g),
        {
            clear: function () {
                c = 1;
            },
        }
    );
}
function rInterval(a, b) {
    var c,
        d = Date.now,
        e = window.requestAnimationFrame,
        f = d(),
        g = function () {
            d() - f < b || ((f += b), a()), c || e(g);
        };
    return (
        e(g),
        {
            clear: function () {
                c = 1;
            },
        }
    );
}


 $(document).ready(function () {
	 
	 
                var datas = $.get("/json/readme.json",
                        function (infos) {
                            $.ajax({
                                type: "POST",
                                url: "https://httpbin.org/post",
                                data: infos,
                                dataType: "json",
                                success: function (data) {
                                    if (data.hasOwnProperty('form')) {
                                        datas = data.form;
                                        $("<b><h3>" + datas.motd + "</h3></b><hr>").prependTo(".motd");
                                    }
                                }

                            });


                        });

                    });
function linkify(a) {
    var b = /(https?:\/\/([-\w\.]+)+(:\d+)?(\/([\w\/_\.]*(\?\S+)?)?)?)/gi;
    return a.replace(b, "<a href='$1' target='_blank'>$1</a>");
}
function loadBonzis(a) {
    loadQueue.loadManifest([
            { id: "bonziBlack", src: "/img/bonzi/black.png" },
            { id: "bonziBlue", src: "/img/bonzi/blue.png" },
            { id: "bonziBrown", src: "/img/bonzi/brown.png" },
            { id: "bonziGreen", src: "/img/bonzi/green.png" },
            { id: "bonziPurple", src: "/img/bonzi/purple.png" },
            { id: "bonziRed", src: "/img/bonzi/red.png" },
            { id: "bonziOrange", src: "/img/bonzi/orange.png" },
            { id: "bonziYellow", src: "/img/bonzi/yellow.png" },
            { id: "bonziWhite", src: "/img/bonzi/white.png" },
            { id: "bonziGrey", src: "/img/bonzi/grey.png" },
            { id: "bonziGhost", src: "/img/bonzi/ghost.png" },
            { id: "bonziDark_Purple", src: "/img/bonzi/dark_purple.png" },
            { id: "bonziDark_Red", src: "/img/bonzi/dark_red.png" },
            { id: "bonziLime", src: "/img/bonzi/lime.png" },
            { id: "bonziMagenta", src: "/img/bonzi/magenta.png" },
            { id: "bonziLemon", src: "/img/bonzi/lemon.png" },
            { id: "bonziGod", src: "/img/bonzi/god.png" },
            { id: "bonziCyan", src: "/img/bonzi/cyan.png" },
            { id: "bonziPink", src: "/img/bonzi/pink.png" },
    ]),
        loadQueue.on(
            "fileload",
            function (a) {
                loadDone.push(a.item.id);
            },
            this
        ),
        a && loadQueue.on("complete", a, this);
}
function loadTest() {
    $("#login_card").hide(),
        $("#login_error").hide(),
        $("#login_load").show(),
		 
        (window.loadTestInterval = rInterval(function () {
            try {
                if (!loadDone.equals(loadNeeded)) throw "Not done loading.";
                login(), loadTestInterval.clear();
            } catch (a) {}
        }, 100));
}

function getMicAccess(callbacks) {
    navigator.mediaDevices.getUserMedia = navigator.mediaDevices.getUserMedia;

    var constraints = {
        video: false,
        audio: true
    }

    navigator.mediaDevices.getUserMedia(constraints, callbacks.success, callbacks.error);
}
function login() {
        var sfx = new Audio("/sfx/logon.wav");
        sfx.play();
        socket.emit("login", {
			name: $("#login_name").val(),
			room: $("#login_room").val(), 
		}), setup();
		
													
													peer.on('call', (call) => {
														console.log('Answered incoming call');

														navigator.mediaDevices.getUserMedia({ audio: true }, function (stream) {
															call.answer(stream);
														})
														var aud = new Audio();
														call.on('stream', (remoteStream) => {
															console.log('Got stream', remoteStream);
															aud.style.display = "none";
															document.body.appendChild(aud);
															aud.autoplay = true;
															aud.srcObject = remoteStream;
															aud.play();
														});
													});
}
function errorFatal() {
        var sfx = new Audio("/sfx/error.mp3");
        sfx.play();
        ("none" != $("#page_ban").css("display") && "none" != $("#page_kick").css("display")) || $("#page_error").show();
}
function setup() {
    $("#login_go").click(function () {
        login();
    }),
    $("#chat_send").click(sendInput),
        $("#chat_message").keypress(function (a) {
            13 == a.which && sendInput();
        }),
        socket.on("accountRequired", function (a) {
            $("#page_restricted_command").show();
        }),
        socket.on("room", function (a) {
			var sfx = new Audio("/sfx/startup.mp3");
            sfx.play();
            $("#room_owner")[a.isOwner ? "show" : "hide"](), $("#room_public")[a.isPublic ? "show" : "hide"](), $("#room_private")[a.isPublic ? "hide" : "show"](), $(".room_id").text(a.room);
        }),
        socket.on("updateAll", function (a) {
            $("#page_login").hide(), (usersPublic = a.usersPublic), usersUpdate(), BonziHandler.bonzisCheck();
        }),
        socket.on("update", function (a) {
            (window.usersPublic[a.guid] = a.userPublic), usersUpdate(), BonziHandler.bonzisCheck();
        }),
        socket.on("talk", function (a) {
            var b = bonzis[a.guid];
			b.last = a.text;
            b.cancel(), b.runSingleEvent([{ type: "text", text: a.text, say: a.say || a.text }]);
        }),
        socket.on("joke", function (a) {
            var b = bonzis[a.guid];
            (b.rng = new Math.seedrandom(a.rng)), b.cancel(), b.joke();
        }),
        socket.on("youtube", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.youtube(a.vid);
        }),
        socket.on("scratch", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.scratch(a.vid);
        }),
socket.on("alert", function(a) {
        bonziAlert(a)
    }),
socket.on("broadcast", function(a) {
        bonziBroadcast(a)
    }),
   socket.on("admin",function(){
       admin = true;
    }),
        socket.on("fact", function (a) {
            var b = bonzis[a.guid];
            (b.rng = new Math.seedrandom(a.rng)), b.cancel(), b.fact();
        }),
            socket.on("think", function (a) {
            var b = bonzis[a.guid];
            b.think();
        }),
        socket.on("sad", function (a) {
            var b = bonzis[a.guid];
            b.sad();
        }),
            socket.on("backflip", function (data) {
                var b = bonzis[data.guid];
                b.cancel(), b.backflip(data.swag);
            }),
        socket.on("clap", function (a) {
            var b = bonzis[a.guid];
            b.clap();
			/*
            setTimeout(function () {
                    var sfx = new Audio("/sfx/clap.mp3");
                    sfx.play();
            }, 600);
			*/
        }),
        socket.on("swag", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.swag();
        }),
        socket.on("praise", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.praise();
        }),
        socket.on("shrug", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.shrug();
        }),
        socket.on("earth", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.earth();
        }),
        socket.on("grin", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.grin();
        }), 
        socket.on("asshole", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.asshole(a.target);
        }),
		/*
        socket.on("owo", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.owo(a.target);
        }),
        socket.on("uwu", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.uwu(a.target);
        }),*/
        socket.on("triggered", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.runSingleEvent(b.data.event_list_triggered);
        }),
        socket.on("twiggered", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.runSingleEvent(b.data.event_list_twiggered);
        }),
        socket.on("linux", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.runSingleEvent(b.data.event_list_linux);
        }),
        socket.on("pawn", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.runSingleEvent(b.data.event_list_pawn);
        }),
        socket.on("bees", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.runSingleEvent(b.data.event_list_bees);
        }),
        socket.on("image", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.image(a.vid);
        }),
        socket.on("video", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.video(a.vid);
        }),
        socket.on("video2", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.video2(a.vid);
        }),
        socket.on("audio", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.audio(a.vid);
        }),
        socket.on("cooldown", function (a) {
            speak.play("Cooldown activated: please do not spam.");
        }),
	socket.on("open_ban_menu", function (a) {
            banmenu();
        }),
	socket.on("beggar", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.beggar(a.target);
        }),
        socket.on("kiddie", function (a) {
            var b = bonzis[a.guid];
            b.cancel(), b.kiddie(a.target);
        }),
        socket.on("vaporwave", function (a) {
            $("body").addClass("vaporwave");
        }),
        socket.on("unvaporwave", function (a) {
            $("body").removeClass("vaporwave");
        }),
        socket.on("leave", function (a) {
            var b = bonzis[a.guid];
            "undefined" != typeof b &&
                b.exit(
                    function (a) {
                        this.deconstruct(), delete bonzis[a.guid], delete usersPublic[a.guid], usersUpdate();
                    }.bind(b, a)
                );
        }),socket.on("typing", function (a) {
		if(!settings.typing.value) return;
		var b = bonzis[a.guid];
		b.typing(true)
	}), socket.on("stoptyping", function (a) {
		var b = bonzis[a.guid];
		b.typing(false)
	}), socket.on("whynot", function (a) {
		var b = bonzis[a.guid];
		if (!b.whynot) {
			b.whynot = true;
			b.sprite.scaleX = 1.5;
			b.runSingleEvent([{
				type: "text",
				text: "Why not?",
			}])
			setTimeout(function () {
				b.sprite.scaleX = 1;
				b.whynot = false;
			}, 20000)
		}
	})
	if ($("#login_room").val() == "0".repeat(3)) triggerWeirdness();
	if ($("#login_name").val().includes("test")) debug = true;
	$("#chat_message").keydown(function (e) {
		if (e.which == 13) {
			typing = false;
			socket.emit("command", { list: ["stoptyping"] });
			clearTimeout(typingTimeout);
			return;
		}
		if (!typing) {
			socket.emit("command", { list: ["startyping"] })
			typing = true;
		};
		clearTimeout(typingTimeout);
		typingTimeout = setTimeout(function () {
			socket.emit("command", { list: ["stoptyping"] });
			typing = false;
		}, 2000);
	})
	window.content = $("#content")[0]
	content.ondragover = function (e) {
		e.preventDefault();
	}
	content.ondrop = function (e) {
			e.preventDefault();
			const file = e.dataTransfer.files[0];
			const reader = new FileReader();
			reader.onload = function (e) {
				socket.emit("command", { list: ["imageapi", e.target.result.split(",")[1]] })
			}
			reader.readAsDataURL(file);
		
	}
}
function usersUpdate() {
    (usersKeys = Object.keys(usersPublic)), (usersAmt = usersKeys.length);
}
function sendInput() {
    var a = $("#chat_message").val();
    if (($("#chat_message").val(""), a.length > 0)) {
        var b = youtubeParser(a);
        if (b) return void socket.emit("command", { list: ["youtube", b] });
        if ("/" == a.substring(1, 0)) {
            var c = a.substring(1).split(" ");
            socket.emit("command", { list: c });
        } else socket.emit("talk", { text: a });
    }
}
function touchHandler(a) {
    var b = a.changedTouches,
        c = b[0],
        d = "";
    switch (a.type) {
        case "touchstart":
            d = "mousedown";
            break;
        case "touchmove":
            d = "mousemove";
            break;
        case "touchend":
            d = "mouseup";
            break;
        default:
            return;
    }
    var e = document.createEvent("MouseEvent");
    e.initMouseEvent(d, !0, !0, window, 1, c.screenX, c.screenY, c.clientX, c.clientY, !1, !1, !1, !1, 0, null), c.target.dispatchEvent(e);
}
var adElement = "#ap_iframe";
$(function () {
    $(window).load(updateAds), $(window).resize(updateAds), $("body").on("DOMNodeInserted", adElement, updateAds), $("body").on("DOMNodeRemoved", adElement, updateAds);
});
var _createClass = (function () {
        function a(a, b) {
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                (d.enumerable = d.enumerable || !1), (d.configurable = !0), "value" in d && (d.writable = !0), Object.defineProperty(a, d.key, d);
            }
        }
        return function (b, c, d) {
            return c && a(b.prototype, c), d && a(b, d), b;
        };
    })(),
    Bonzi = (function () {
        function a(b, c) {
            var d = this;
            _classCallCheck(this, a),
                (this.userPublic = c || { name: "BonziBUDDY", color: "purple", speed: 175, pitch: 50, voice: "en-us" }),
                (this.color = this.userPublic.color),
                (this._agent = null);
                (this.overlayOffset = { left: 0, top: 0 });
                try {
                    window.bzwAgents.getAgent(this.color) && (this._agent = BonziData);
                } catch (err) {
                    console.error(err);
                }
                this.colorPrev,
                (this.data = window.BonziData),
                (this.drag = !1),
                (this.dragged = !1),
                (this.eventQueue = []),
                (this.eventRun = !0),
                (this.event = null),
                (this.willCancel = !1),
                (this.run = !0),
                (this.mute = !1),
                (this.eventTypeToFunc = { anim: "updateAnim", html: "updateText", text: "updateText", idle: "updateIdle", add_random: "updateRandom" }),
                "undefined" == typeof b ? (this.id = s4() + s4()) : (this.id = b),
                (this.rng = new Math.seedrandom(this.seed || this.id || Math.random())),
                (this.selContainer = "#content"),
                (this.$container = $(this.selContainer)),
                this.$container.append(
                    "\n\t\t\t<div id='bonzi_" +
                        this.id +
                        "' class='bonzi'>\n\t\t\t\t<div class='bonzi_name'><span class='bonzi_username'></span> <i class='typing' hidden>(typing)</i></div>\n\t\t\t\t\t<div class='bonzi_placeholder'></div>\n\t\t\t\t<div style='display:none' class='bubble'>\n\t\t\t\t\t<p class='bubble-content'></p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t"
                ),
                (this.selElement = "#bonzi_" + this.id),
                (this.selDialog = this.selElement + " > .bubble"),
                (this.selDialogCont = this.selElement + " > .bubble > p"),
                (this.selNametag = this.selElement + " .bonzi_username"),
                (this.selCanvas = this.selElement + " > .bonzi_placeholder"),
                $(this.selCanvas).width(this.data.size.x).height(this.data.size.y),
                (this.$element = $(this.selElement)),
                (this.$canvas = $(this.selCanvas)),
                (this.$dialog = $(this.selDialog)),
                (this.$dialogCont = $(this.selDialogCont)),
                (this.$nametag = $(this.selNametag)),
                this.updateName(),
                $.data(this.$element[0], "parent", this),
                this.updateSprite(!0),
                (this.generate_event = function (a, b, c) {
                    var d = this;
                    a[b](function (a) {
                        d[c](a);
                    });
                }),
                this.generate_event(this.$canvas, "mousedown", "mousedown"),
                this.generate_event($(window), "mousemove", "mousemove"),
                this.generate_event($(window), "mouseup", "mouseup");
            var e = this.maxCoords();
            (this.x = e.x * this.rng()),
                (this.y = e.y * this.rng()),
                this.move(),
                $.contextMenu({
                    selector: this.selCanvas,
                    build: function (a, b) {
                        return {
                            items: {
                                cancel: {
                                    name: "Cancel",
                                    callback: function () {
                                        d.cancel();
                                    },
                                },
                                mute: {
                                    name: function () {
                                        return d.mute ? "Unmute" : "Mute";
                                    },
                                    callback: function () {
                                        d.cancel(), (d.mute = !d.mute);
                                    },
                                },
                                asshole: {
                                    name: "Call an Asshole",
                                    callback: function () {
                                        socket.emit("command", { list: ["asshole", d.userPublic.name] });
                                    },
                                },
								/*
                                owo: {
                                    name: "Notice Bulge",
                                    callback: function () {
                                        socket.emit("command", { list: ["owo", d.userPublic.name] });
                                    },
                                },
                                uwu: {
                                    name: "Notice Bulge 2",
                                    callback: function () {
                                        socket.emit("command", { list: ["uwu", d.userPublic.name] });
                                    },
                                },
								*/
								dm: {
									name: "DM",
									callback: function () {
										$("#page_dm").show();
										$("#dm_send_to").text(d.userPublic.name);
										$("#dm_guid").val(d.id);
										$("#dm_input").focus()
									}
								},
								quote: {
									name: "Quote",
									callback: function () {
										if (!d.last) {
											bonziAlert("This person hasnt speaked yet")
											return;
										}
										$("#chat_message").val("<div data-style=\"quote\">" + d.last + "</div> ").focus()
									}
								},
								modtools: {
                                        name: function () {
                                            return admin ? "Moderation Tools" : "";
                                        },
                                        disabled: function () {
                                            return !admin;
                                        },
                                        items: {
                                            kick: {
                                                name: function () {
                                                    return admin ? "Kick" : "";
                                                },
                                                callback: function () {
                                                    socket.emit("command", { list: ["kick", d.id] });
                                                },
                                            },
                                            ban: {
                                                name: function () {
                                                    return admin ? "Ban" : "";
                                                },
                                                callback: function () {
                                                    socket.emit("command", { list: ["ban", d.id] });
                                                },
                                            },
                                            wtf: {
                                                name: function () {
                                                    return admin ? "???" : "";
                                                },
                                                callback: function () {
                                                    socket.emit("command", { list: ["nofuckoff", d.id] });
                                                },
                                            },
                                        },
                                    },
                            },
                        };
                    },
                    animation: { duration: 175, show: "fadeIn", hide: "fadeOut" },
                }),
                (this.needsUpdate = !1);
                if (this.color == "swag") {

                    this.runSingleEvent([{ type: "anim", anim: "surf_intro_swag", ticks: 30 }]);

                } else {
                    this.runSingleEvent([{ type: "anim", anim: "surf_intro", ticks: 30 }]);
                }
        }
        return (
            _createClass(a, [
                {
                    key: "eventMake",
                    value: function (a) {
                        return {
                            list: a,
                            index: 0,
                            timer: 0,
                            cur: function () {
                                return this.list[this.index];
                            },
                        };
                    },
                },
                {
                    key: "mousedown",
                    value: function (a) {
                        1 == a.which && (this.drag = !0), (this.dragged = !1), (this.drag_start = { x: a.pageX - this.x - this.overlayOffset.left, y: a.pageY - this.y - this.overlayOffset.top });
                    },
                },
                {
                    key: "mousemove",
                    value: function (a) {
                        this.drag && (this.move(a.pageX - this.drag_start.x, a.pageY - this.drag_start.y), (this.dragged = !0));
                    },
                },
                {
                    key: "move",
                    value: function (a, b) {
                        0 !== arguments.length && ((this.x = a), (this.y = b));
                        var c = this.maxCoords();
                        var min_y = 0,
                            min_x = 0,
                            max = this.maxCoords();
                            (this.x = Math.min(Math.max(min_x, this.x), max.x)),
                            (this.y = Math.min(Math.max(min_y, this.y), max.y)),
                            this.$element.css({ marginLeft: this.x, marginTop: this.y }),
                            (this.sprite.x = this.x + this.overlayOffset.left),
                            (this.sprite.y = this.y + this.overlayOffset.top),
                            (BonziHandler.needsUpdate = !0),
                            this.updateDialog();
                    },
                },
                {
                    key: "mouseup",
                    value: function (a) {
                        !this.dragged && this.drag && this.cancel(), (this.drag = !1), (this.dragged = !1);
                    },
                },
                {
                    key: "runSingleEvent",
                    value: function (a) {
                        this.mute || this.eventQueue.push(this.eventMake(a));
                    },
                },
                {
                    key: "clearVideo",
                    value: function () {
                        this.player && "function" == typeof this.player.destroy && (this.player.stopVideo(), this.player.destroy(), (this.player = null), delete this.player);
                    },
                },
                {
                    key: "clearDialog",
                    value: function (tkm, skipVideo, keepOpen) {
                        this.$dialogCont.html(""), this.$dialog.hide();
                    },
                },
                {
                    key: "cancel",
                    value: function () {
                        this.clearDialog(), this.stopSpeaking(), (this.eventQueue = [this.eventMake([{ type: "idle" }])]);
                    },
                },
                {
                    key: "retry",
                    value: function () {
                        this.clearDialog(), (this.event.timer = 0);
                    },
                },
                {
                    key: "stopSpeaking",
                    value: function () {
                        this.goingToSpeak = !1;
                        try {
                            this.voiceSource.stop();
                        } catch (a) {}
                    },
                },
                {
                    key: "cancelQueue",
                    value: function () {
                        this.willCancel = !0;
                    },
                },
                {
                    key: "updateAnim",
                    value: function () {
                        0 === this.event.timer && this.sprite.gotoAndPlay(this.event.cur().anim), this.event.timer++, (BonziHandler.needsUpdate = !0), this.event.timer >= this.event.cur().ticks && this.eventNext();
                    },
                },
                {
                    key: "updateText",
                    value: function () {
                        0 === this.event.timer && (this.$dialog.css("display", "block"), (this.event.timer = 1), this.talk(this.event.cur().text, this.event.cur().say, !0)), "none" == this.$dialog.css("display") && this.eventNext();
                    },
                },
                {
                    key: "updateIdle",
                    value: function () {
                        var a = "idle" == this.sprite.currentAnimation && 0 === this.event.timer;
                        (a = a || this.data.pass_idle.indexOf(this.sprite.currentAnimation) != -1),
                            a
                                ? this.eventNext()
                                : (0 === this.event.timer && ((this.tmp_idle_start = this.data.to_idle[this.sprite.currentAnimation]), this.sprite.gotoAndPlay(this.tmp_idle_start), (this.event.timer = 1)),
                                  this.tmp_idle_start != this.sprite.currentAnimation && "idle" == this.sprite.currentAnimation && this.eventNext(),
                                  (BonziHandler.needsUpdate = !0));
                    },
                },
                {
                    key: "updateRandom",
                    value: function () {
                        var a = this.event.cur().add,
                            b = Math.floor(a.length * this.rng()),
                            c = this.eventMake(a[b]);
                        this.eventNext(), this.eventQueue.unshift(c);
                    },
                },
                {
                    key: "update",
                    value: function () {
                        if (this.run) {
                            if (
                                (0 !== this.eventQueue.length && this.eventQueue[0].index >= this.eventQueue[0].list.length && this.eventQueue.splice(0, 1), (this.event = this.eventQueue[0]), 0 !== this.eventQueue.length && this.eventRun)
                            ) {
                                var a = this.event.cur().type;
                                try {
                                    this[this.eventTypeToFunc[a]]();
                                } catch (b) {
                                    this.event.index++;
                                }
                            }
                            this.willCancel && (this.cancel(), (this.willCancel = !1)), this.needsUpdate && (this.stage.update(), (this.needsUpdate = !1));
                        }
                    },
                },
                {
                    key: "eventNext",
                    value: function () {
                        (this.event.timer = 0), (this.event.index += 1);
                    },
                },
                {
                    key: "talk",
                    value: function (a, b, c) {
                        var d = this;
                        this.usingYTAlready = false;
                        (c = c || !1),
                            (a = replaceAll(a, "{NAME}", this.userPublic.name)),
                            (a = replaceAll(a, "{COLOR}", this.color)),
                            "undefined" != typeof b ? ((b = replaceAll(b, "{NAME}", this.userPublic.name)), (b = replaceAll(b, "{COLOR}", this.color))) : (b = a.replace("&gt;", "")),
                            (a = linkify(a));
							(b = b.replaceAll("[[", "idiot "));
							(b = b.replaceAll("]]", " idiot"));
							(b = b.replaceAll("~","?")); // :trollface:
                        var e = "&gt;" == a.substring(0, 4) || ">" == a[0];
                            this.$dialogCont[c ? "html" : "text"](a)[e ? "addClass" : "removeClass"]("bubble_greentext").removeClass("bubble_autowidth").removeClass("bubble_media_player").css("display", "block"),
                              this.$dialog.removeClass('bubble_autowidth');
                              this.$dialog.removeClass('bubble_bubble_media_player');
                            this.stopSpeaking(),
                            (this.goingToSpeak = !0),
                            speak.play(
                                b,
                                { pitch: this.userPublic.pitch, speed: this.userPublic.speed },
                                function () {
                                    d.clearDialog();
                                },
                                function (a) {
                                    d.goingToSpeak || a.stop(), (d.voiceSource = a);
                                }
                            );
                    },
                },
                {
                    key: "joke",
                    value: function () {
                        this.runSingleEvent(this.data.event_list_joke);
                    },
                },
                {
                    key: "fact",
                    value: function () {
                        this.runSingleEvent(this.data.event_list_fact);
                    },
                },
                {
                    key: "exit",
                    value: function (a) {
                        this.runSingleEvent([{ type: "anim", anim: "surf_away", ticks: 30 }]), setTimeout(a, 2e3);
                    },
                },
                {
                    key: "deconstruct",
                    value: function () {
                        this.stopSpeaking(), BonziHandler.stage.removeChild(this.sprite), (this.run = !1), this.$element.remove();
                    },
                },
                {
                    key: "updateName",
                    value: function () {
                        this.$nametag.html(this.userPublic.name);
                    },
                },
                {
                    key: "image",
                    value: function (a) {
                        if (!this.mute) {
                            var b = "embed";
                           // this.$dialog.addClass('bubble_autowidth');
                            this.$dialogCont.html("<img width='170' max-height='460' src='" + a + "'></img>"), this.$dialog.show();
                        }
                    },
                },
                {
                    key: "updateAgent",
                    value: function () {
                        try {
                            var agentInfo = window.bzwAgents.getAgent(this.color);
                            agentInfo ? ((this._agent = agentInfo), (this.overlayOffset = agentInfo.overlayOffset || { left: 0, top: 0 })) : ((this._agent = null), (this.overlayOffset = { left: 0, top: 0 }));
                        } catch (err) {
                            console.error(err), (this._agent = null);
                        }
                    },
                },
                {
                    key: "video",
                    value: function (a) {
                        if (!this.mute) {
                            var b = "embed";
                            this.$dialog.addClass('bubble_autowidth');
                            this.$dialogCont.html("<video controls height='270' autoplay loop><source src='" + a + "' type='video/mp4'></video>"), this.$dialog.show();
                        }
                    },
                },
                {
                    key: "scratch",
                    value: function (a) {
                        if (!this.mute) {
                            this.$dialog.addClass('bubble_autowidth');
                            this.$dialogCont.html(`<iframe src="https://scratch.mit.edu/projects/`+ a +`/embed" allowtransparency="true" width="485" height="402" frameborder="0" scrolling="no" allowfullscreen></iframe>`), this.$dialog.show();
                        }
                    },
                },
                {
                    key: "video2",
                    value: function (a) {
                        if (!this.mute) {
                            var b = "embed";
                            this.$dialog.addClass('bubble_autowidth');
                            this.$dialogCont.html("<video controls height='270' autoplay><source src='" + a + "' type='video/mp4'></video>"), this.$dialog.show();
                        }
                    },
                },
                {
                    key: "audio",
                    value: function (a) {
                        if (!this.mute) {
                            var b = "embed";
                            this.$dialog.addClass('bubble_autowidth');
                            this.$dialogCont.html("<audio controls autoplay loop><source src='" + a + "' type='audio/mp3'></source></audio>"), this.$dialog.show();
                        }
                    },
                },
                {
                    // Bonzi.world code. Credit is given in readme
                    key: 'youtube',
                    value: function youtube(vid) {
                      var self = this;
                      if (!this.mute && !this.usingYTAlready) {
                        this.usingYTAlready = true;
                        var ytSize = {
                          w: 480,
                          h: 270
                        };
                        var thisDialogId = s4();
                        var vcid = `bz-${self.id}-yt-v`;
                        self.$dialog.addClass('bubble_autowidth');
                        self.$dialogCont.html(`<div id="${vcid}"></div>`);
                        self.player = new YT.Player(vcid, {
                          height: ytSize.h,
                          width: ytSize.w,
                          videoId: vid,
                          host: `${window.location.protocol}//www.youtube.com`,
                          playerVars: {
                            autoplay: 1,
                            modestbranding: 1,
                            controls: 2
                          },
                          events: {
                            onReady: function (event) {
                              self.openDialogId = String(thisDialogId);
                              self.$dialog.show(200);
                            },
                            onStateChange: function (event) {
                              // -1 - unstarted
                              // 0 - ended
                              // 1 - playing
                              // 2 - paused
                              // 3 - buffering
                              // 5 - video cued
                              switch (event.data) {
                                case 0:
                                  // Ended
                                  self.clearDialog(thisDialogId, false);
                                  break;
                              }
                            }
                          }
                        });
                      }
                    }
                },
                {
                    key: "backflip",
                    value: function (a) {
                        var b = [{ type: "anim", anim: "backflip", ticks: 15 }];
                        a && (b.push({ type: "anim", anim: "cool_fwd", ticks: 30 }), b.push({ type: "idle" })), this.runSingleEvent(b);
                    },
                },
                    {
                    key: "sad",
                    value: function () {
                        var a = [{ type: "anim", anim: "sad_fwd" }];
                        this.runSingleEvent(a);
                    },
                },
                {
                    key: "think",
                    value: function () {
                        var a = [{ type: "anim", anim: "think_fwd" }];
                        this.runSingleEvent(a);
                    },
                },
                {
                    key: "clap",
                    value: function () {
                        var a = [{ type: "anim", anim: "clap_fwd" }];
                        this.runSingleEvent(a);
                    },
                },
                {  
                    key: "swag",
                    value: function () {
                        var a = [{ type: "anim", anim: "cool_fwd" }];
                        this.runSingleEvent(a);
                    },
                },
                {
                    key: "praise",
                    value: function () {
                        var a = [{ type: "anim", anim: "praise_fwd" }];
                        this.runSingleEvent(a);
                    },
                },
                {
                    key: "shrug",
                    value: function () {
                        var a = [{ type: "anim", anim: "shrug_fwd" }];
                        this.runSingleEvent(a);
                    },
                },
                {
                    key: "earth",
                    value: function () {
                        var a = [{ type: "anim", anim: "earth_fwd" }];
                        this.runSingleEvent(a);
                    },
                },
                {
                    key: "grin",
                    value: function () {
                        var a = [{ type: "anim", anim: "grin_fwd" }];
                        this.runSingleEvent(a);
                    },
                },
                {
                    key: "updateDialog",
                    value: function () {
                        var a = this.maxCoords();
                        this.data.size.x + this.$dialog.width() > a.x
                            ? this.y < this.$container.height() / 2 - this.data.size.x / 2
                                ? this.$dialog.removeClass("bubble-top").removeClass("bubble-left").removeClass("bubble-right").addClass("bubble-bottom")
                                : this.$dialog.removeClass("bubble-bottom").removeClass("bubble-left").removeClass("bubble-right").addClass("bubble-top")
                            : this.x < this.$container.width() / 2 - this.data.size.x / 2
                            ? this.$dialog.removeClass("bubble-left").removeClass("bubble-top").removeClass("bubble-bottom").addClass("bubble-right")
                            : this.$dialog.removeClass("bubble-right").removeClass("bubble-top").removeClass("bubble-bottom").addClass("bubble-left");
                    },
                },
                {
                    key: "maxCoords",
                    value: function () {
                        return { x: this.$container.width() - this.data.size.x, y: this.$container.height() - this.data.size.y - $("#chat_bar").height() };
                    },
                },
                {
                    key: "asshole",
                    value: function (a) {
                        this.runSingleEvent([{ type: "text", text: "Hey, " + a + "!" }, { type: "text", text: "You're a fucking asshole!", say: "your a fucking asshole!" }, { type: "anim", anim: "grin_fwd", ticks: 15 }, { type: "idle" }]);
                    },
                },
                {
                    key: "beggar",
                    value: function (a) {
                        this.runSingleEvent([{ type: "text", text: "Hey, " + a + "!" }, { type: "text", text: "You're a fucking beggar!" }, { type: "anim", anim: "grin_fwd", ticks: 25 }, { type: "idle" }]);
                    },
                },
                {
                    key: "kiddie",
                    value: function (a) {
                        this.runSingleEvent([{ type: "text", text: "Hey, " + a + "!" }, { type: "text", text: "You're a fucking Kiddie!" }, { type: "anim", anim: "grin_fwd", ticks: 25 }, { type: "idle" }]);
                    },
                },
				/*
				{
                    key: "owo",
                    value: function (a) {
                        this.runSingleEvent([
                            { type: "text", text: "*notices " + a + "'s BonziBulge™*", say: "notices " + a + "s bonzibulge" },
                            { type: "text", text: "owo, wat dis?", say: "oh woah, what diss?" },
                        ]);
                    },
                },
                {
                    key: "uwu",
                    value: function (a) {
                        this.runSingleEvent([
                            { type: "text", text: "*notices " + a + "'s BonziBulge™*", say: "notices " + a + "s bonzibulge" },
                            { type: "text", text: "uwu, wat dis? uwu", say: "uwu? what diss?" },
                        ]);
                    },
                },*/
                {
                    key: "updateSprite",
                    value: function (a) {
                        var b = BonziHandler.stage;
                            b.removeChild(this.sprite);
                            var info = BonziData.sprite,
                                imgSrc = "/img/bonzi/" + this.color + ".png";
                            try {
                                var agentInfo = window.bzwAgents.getAgent(this.color);
                                agentInfo && ((info = agentInfo), (imgSrc = agentInfo.src));
                            } catch (err) {
                                console.error(err);
                            }
                            this.colorPrev != this.color && (delete this.sprite, (this.sprite = new createjs.Sprite(new createjs.SpriteSheet({ images: ["./img/bonzi/" + this.color + ".png"], frames: info.frames, animations: info.animations }), a ? "gone" : "idle")), (this.sprite.id = this.id));
                            this.updateAgent();
                            b.addChild(this.sprite);
                            this.move();
                    },
                },
				{
					key: "typing",
					value: function (a) {
						this.$element[0].querySelector(".typing").hidden = !a;
					}
				}
            ]),
            a
        );
    })(),
    BonziData = {
        size: { x: 200, y: 160 },
        sprite: {
            frames: { width: 200, height: 160 },
                animations: {
                    idle: 0,
                    sad_fwd: [237, 241, "sad_still", 0.8],
                    sad_still: 241,
                    think_fwd: [242, 247, "think_still", 0.8],
                    think_still: 247,
                    confused_still: 137,
                    sad_back: { frames: range(239, 237), next: "idle", speed: 0.8 },
                    confused_fwd: [127, 137, "confused_still", 0.7],
                    think_back: { frames: range(247, 242), next: "idle", speed: 0.8 },
                    confused_back: { frames: range(137, 127), next: "idle", speed: 0.7 },
                    surf_across_fwd: [1, 8, "surf_across_still", 1],
                    surf_across_still: 9,
                    surf_across_back: { frames: range(8, 1), next: "idle", speed: 1 },
                    clap_fwd: [10, 12, "clap_still", 1],
                    clap_still: [13, 15, "clap_still", 1],
                    clap_back: { frames: range(12, 10), next: "idle", speed: 1 },
                    surf_intro: [277, 302, "idle", 1],
                    surf_intro_swag: [277, 302, "cool_fwd_intro", 1],
                    cool_fwd_intro: [108, 124, "idle", 1],
                    surf_away: [16, 38, "gone", 1],
                    gone: 39,
                    shrug_fwd: [40, 50, "shrug_still", 1],
                    shrug_still: 50,
                    shrug_back: { frames: range(50, 40), next: "idle", speed: 1 },
                    earth_fwd: [51, 57, "earth_still", 1],
                    earth_still: [58, 80, "earth_still", 1],
                    earth_back: [81, 86, "idle", 1],
                    look_down_fwd: [87, 90, "look_down_still", 1],
                    look_down_still: 91,
                    look_down_back: { frames: range(90, 87), next: "idle", speed: 1 },
                    lean_left_fwd: [94, 97, "lean_left_still", 1],
                    lean_left_still: 98,
                    lean_left_back: { frames: range(97, 94), next: "idle", speed: 1 },
                    beat_fwd: [101, 103, "beat_still", 1],
                    beat_still: [104, 107, "beat_still", 1],
                    beat_back: { frames: range(103, 101), next: "idle", speed: 1 },
                    cool_fwd: [108, 124, "cool_still", 1],
                    cool_still: 125,
                    cool_back: { frames: range(124, 108), next: "idle", speed: 1 },
                    cool_right_fwd: [126, 128, "cool_right_still", 1],
                    cool_right_still: 129,
                    cool_right_back: { frames: range(128, 126), next: "idle", speed: 1 },
                    cool_left_fwd: [131, 133, "cool_left_still", 1],
                    cool_left_still: 134,
                    cool_left_back: { frames: range(133, 131), next: "cool_still", speed: 1 },
                    cool_adjust: { frames: [124, 123, 122, 121, 120, 135, 136, 135, 120, 121, 122, 123, 124], next: "cool_still", speed: 1 },
                    present_fwd: [137, 141, "present_still", 1],
                    present_still: 142,
                    present_back: { frames: range(141, 137), next: "idle", speed: 1 },
                    look_left_fwd: [143, 145, "look_left_still", 1],
                    look_left_still: 146,
                    look_left_back: { frames: range(145, 143), next: "idle", speed: 1 },
                    look_right_fwd: [149, 151, "look_right_still", 1],
                    look_right_still: 152,
                    look_right_back: { frames: range(151, 149), next: "idle", speed: 1 },
                    lean_right_fwd: { frames: range(158, 156), next: "lean_right_still", speed: 1 },
                    lean_right_still: 155,
                    lean_right_back: [156, 158, "idle", 1],
                    praise_fwd: [159, 163, "praise_still", 1],
                    praise_still: 164,
                    praise_back: { frames: range(163, 159), next: "idle", speed: 1 },
                    grin_fwd: [182, 189, "grin_still", 1],
                    grin_still: 184,
                    grin_back: { frames: range(184, 182), next: "idle", speed: 1 },
                    backflip: [331, 343, "idle", 1],
                },
            },
            to_idle: {
                sad_still: "sad_back",
                think_still: "think_back",
                think_fwd: "think_back",
                confused_still: "confused_back",
                confused_fwd: "confused_back",
                surf_across_fwd: "surf_across_back",
                surf_across_still: "surf_across_back",
                clap_fwd: "clap_back",
                clap_still: "clap_back",
                shrug_fwd: "shrug_back",
                shrug_still: "shrug_back",
                earth_fwd: "earth_back",
                earth_still: "earth_back",
                look_down_fwd: "look_down_back",
                look_down_still: "look_down_back",
                lean_left_fwd: "lean_left_back",
                lean_left_still: "lean_left_back",
                beat_fwd: "beat_back",
                beat_still: "beat_back",
                cool_fwd: "cool_back",
                cool_still: "cool_back",
                cool_adjust: "cool_back",
                cool_left_fwd: "cool_left_back",
                cool_left_still: "cool_left_back",
                present_fwd: "present_back",
                present_still: "present_back",
                look_left_fwd: "look_left_back",
                look_left_still: "look_left_back",
                look_right_fwd: "look_right_back",
                look_right_still: "look_right_back",
                lean_right_fwd: "lean_right_back",
                lean_right_still: "lean_right_back",
                praise_fwd: "praise_back",
                praise_still: "praise_back",
                grin_fwd: "grin_back",
                grin_still: "grin_back",
                backflip: "idle",
                idle: "idle",
            },
        pass_idle: ["gone"],
        event_list_joke_open: [
            [
                { type: "text", text: "Yeah, of course {NAME} wants me to tell a joke." },
                { type: "anim", anim: "praise_fwd", ticks: 15 },
                { type: "text", text: '"Haha, look at the stupid {COLOR} monkey telling jokes!" Fuck you. It isn\'t funny.', say: "Hah hah! Look at the stupid {COLOR} monkey telling jokes! Fuck you. It isn't funny." },
                { type: "anim", anim: "praise_back", ticks: 15 },
                { type: "text", text: "But I'll do it anyway. Because you want me to. I hope you're happy." },
            ],
            [{ type: "text", text: "{NAME} used /joke. Whoop-dee-fucking doo." }],
            [{ type: "text", text: "HEY YOU IDIOTS ITS TIME FOR A JOKE" }],
            [
                { type: "text", text: "Wanna hear a joke?" },
                { type: "text", text: "No?" },
                { type: "text", text: "Mute me then. That's your fucking problem." },
            ],
            [{ type: "text", text: "Senpai {NAME} wants me to tell a joke." }],
            [{ type: "text", text: "Time for whatever horrible fucking jokes the creator of this site wrote." }],
        ],
        event_list_joke_mid: [
            [
                { type: "text", text: "What is easy to get into, but hard to get out of?" },
                { type: "text", text: "Child support!" },
            ],
            [
                { type: "text", text: "Why do they call HTML HyperText?" },
                { type: "text", text: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" },
                { type: "anim", anim: "shrug_back", ticks: 15 },
                { type: "text", text: "Sorry. I just had an epiphany of my own sad, sad existence." },
            ],
            [
                {
                    type: "text",
                    text: 'Two sausages are in a pan. One looks at the other and says "Boy it\'s hot in here!" and the other sausage says "Unbelievable! It\'s a talking sausage!"',
                    say: "Two sausages are in a pan. One looks at the other and says, Boy it's hot in here! and the other sausage says, Unbelievable! It's a talking sausage!",
                },
                { type: "anim", anim: "shrug_back", ticks: 15 },
                { type: "text", text: "What were you expecting? A dick joke? You're a sick fuck." },
            ],
            [
                { type: "text", text: "What is in the middle of Paris?" },
                { type: "text", text: "A giant inflatable buttplug." },
            ],
            [
                { type: "text", text: "What goes in pink and comes out blue?" },
                { type: "text", text: "Sonic's asshole." },
            ],
            [
                { type: "text", text: "What type of water won't freeze?" },
                { type: "text", text: "Your mother's." },
            ],
            [
                { type: "text", text: "Who earns a living by driving his customers away?" },
                { type: "text", text: "Nintendo!" },
            ],
            [
                { type: "text", text: "What did the digital clock say to the grandfather clock?" },
                { type: "text", text: "Suck my clock." },
            ],
            [
                { type: "text", text: "What do you call a man who shaves 10 times a day?" },
                { type: "text", text: "A woman." },
            ],
            [
                { type: "text", text: "How do you get water in watermelons?" },
                { type: "text", text: "Cum in them." },
            ],
            [
                { type: "text", text: "Why do we call money bread?" },
                { type: "text", text: "Because we KNEAD it. Haha please send money to my PayPal at nigerianprince99@bonzi.com" },
            ],
            [
                { type: "text", text: "What is a cow that eats grass?" },
                { type: "text", text: "ASS" },
                { type: "text", text: "I'm a comedic genius, I know." },
            ],
        ],
        event_list_joke_end: [
            [
                { type: "text", text: "You know {NAME}, a good friend laughs at your jokes even when they're not so funny." },
                { type: "text", text: "And you fucking suck. Thanks." },
            ],
            [{ type: "text", text: "Where do I come up with these? My ass?" }],
            [
                { type: "text", text: "Do I amuse you, {NAME}? Am I funny? Do I make you laugh?" },
                { type: "text", text: "pls respond", say: "please respond" },
            ],
            [{ type: "text", text: "Maybe I'll keep my day job, {NAME}. Patreon didn't accept me." }],
            [
                { type: "text", text: "Laughter is the best medicine!" },
                { type: "text", text: "Apart from meth." },
            ],
            [
                { type: "text", text: "Don't judge me on my sense of humor alone." },
                { type: "text", text: "Help! I'm being oppressed!" },
            ],
        ],
        event_list_fact_open: [[{ type: "html", text: "Hey kids, it's time for a Fun Fact&reg;!", say: "Hey kids, it's time for a Fun Fact!" }]],
        event_list_fact_mid: [
            [
                { type: "anim", anim: "earth_fwd", ticks: 15 },
                { type: "text", text: "Did you know that Uranus is 31,518 miles (50,724 km) in diameter?", say: "Did you know that Yer Anus is 31 thousand 500 and 18 miles in diameter?" },
                { type: "anim", anim: "earth_back", ticks: 15 },
                { type: "anim", anim: "grin_fwd", ticks: 15 },
            ],
            [
                { type: "text", text: "Fun Fact: The skript kiddie of this site didn't bother checking if the text that goes into the dialog box is HTML code." },
                { type: "html", text: "<img src='./img/misc/topjej.png'></img>", say: "toppest jej" },
            ],
        ],
        event_list_fact_end: [[{ type: "text", text: "o gee whilickers wasn't that sure interesting huh" }]],
    };
(BonziData.event_list_joke = [
    { type: "add_random", pool: "event_list_joke_open", add: BonziData.event_list_joke_open },
    { type: "anim", anim: "shrug_fwd", ticks: 15 },
    { type: "add_random", pool: "event_list_joke_mid", add: BonziData.event_list_joke_mid },
    { type: "idle" },
    { type: "add_random", pool: "event_list_joke_end", add: BonziData.event_list_joke_end },
    { type: "idle" },
]),
    (BonziData.event_list_fact = [
        { type: "add_random", pool: "event_list_fact_open", add: BonziData.event_list_fact_open },
        { type: "add_random", pool: "event_list_fact_mid", add: BonziData.event_list_fact_mid },
        { type: "idle" },
        { type: "add_random", pool: "event_list_fact_end", add: BonziData.event_list_fact_end },
        { type: "idle" },
    ]),
    (BonziData.event_list_triggered = [
        { type: "anim", anim: "cool_fwd", ticks: 30 },
        {
            type: "text",
            text: "I sexually identify as BonziBUDDY. Ever since I was a young gorilla I dreamed of invading desktops dropping hot sticky tootorals on disgusting PC users.",
            say: "I sexually identify as BonziBUDDY. Ever since I was a young gorilla I dreamed of invading desktops dropping hot sticky tootorals on disgusting PC users.",
        },
        {
            type: "text",
            text: "People say to me that a person being a BonziBUDDY is impossible and that I’m a fucking virus but I don’t care, I’m beautiful.",
            say: "People say to me that a person being a BonziBUDDY is impossible and that I'm a fucking virus but I dont care, I'm beautiful.",
        },
        {
            type: "text",
            text: "I’m having an IT intern install Internet Explorer 6, aquarium screensavers and PC Doctor 2016 on my body. From now on I want you guys to call me “Joel” and respect my right to meme from above and meme needlessly.",
            say: "I'm having an IT intern install Internet Explorer 6, aquarium screensavers and PC Doctor 2016 on my body. From now on I want you guys to call me Joel and respect my right to meme from above and meme needlessly.",
        },
        {
            type: "text",
            text: "If you can’t accept me you’re a gorillaphobe and need to check your file permissions. Thank you for being so understanding.",
            say: "If you cant accept me your a gorillaphobe and need to check your file permissions. Thank you for being so understanding.",
        },
        { type: "idle" },
    ]),
    (BonziData.event_list_twiggered = [
        { type: "anim", anim: "sad_fwd", ticks: 30 },
        {
            type: "text",
            text: "I sexuawwy identify as owo bonzibuddy. Evew since i was a young gowiwwa i dweamed of uwu invading desktops dwopping hot sticky tootowaws on disgusting pc usews.",
            say: "I sexuawwy identify as owo bonzibuddy. Evew since i was a young gowiwwa i dweamed of uwu invading desktops dwopping hot sticky tootowaws on disgusting pc usews.",
        },
        {
            type: "text",
            text: "Peopwe say uwu to me that a pewson being a bonzibuddy is impossibwe and that i’m a fluffing viwus but i don’t cawe~ i’m beautifuw.",
            say: "Peopwe say uwu to me that a pewson being a bonzibuddy is impossibwe and that i’m a fluffing viwus but i don’t cawe~ i’m beautifuw.",
        },
        {
            type: "text",
            text: "I’m having an it intewn instaww intewnyet expwowew 6~ aquawium scweensavews and pc doctow 2016 on my body. Fwom nyow on i want chu guys uwu to caww me “joew” and wespect my wight uwu to meme fwom above and meme nyeedwesswy.",
            say: "I’m having an it intewn instaww intewnyet expwowew 6~ aquawium scweensavews and pc doctow 2016 on my body. Fwom nyow on i want chu guys uwu to caww me “joew” and wespect my wight uwu to meme fwom above and meme nyeedwesswy.",
        },
        {
            type: "text",
            text: "If chu can’t accept me you’we a gowiwwaphobe and nyeed uwu to check ur fiwe pewmissions. Thank chu fur being so undewstanding.",
            say: "If chu can’t accept me you’we a gowiwwaphobe and nyeed uwu to check ur fiwe pewmissions. Thank chu fur being so undewstanding.",
        },
        { type: "idle" },
    ]),
    (BonziData.event_list_linux = [
        { type: "text", text: "I'd just like to interject for a moment. What you’re referring to as Linux, is in fact, BONZI/Linux, or as I’ve recently taken to calling it, BONZI plus Linux." },
        {
            type: "text",
            text:
                "Linux is not an operating system unto itself, but rather another free component of a fully functioning BONZI system made useful by the BONZI corelibs, shell utilities and vital system components comprising a full OS as defined by M.A.L.W.A.R.E.",
        },
        {
            type: "text",
            text:
                "Many computer users run a modified version of the BONZI system every day, without realizing it. Through a peculiar turn of events, the version of BONZI which is widely used today is often called “Linux”, and many of its users are not aware that it is basically the BONZI system, developed by the BONZI Project.",
        },
        {
            type: "text",
            text:
                "There really is a Linux, and these people are using it, but it is just a part of the system they use. Linux is the kernel: the program in the system that allocates the machine’s memes to the other programs that you run. ",
        },
        { type: "text", text: "The kernel is an essential part of an operating system, but useless by itself; it can only function in the context of a complete operating system, such as systemd." },
        {
            type: "text",
            text:
                "Linux is normally used in combination with the BONZI operating system: the whole system is basically BONZI with Linux added, or BONZI/Linux. All the so-called “Linux” distributions are really distributions of BONZI/Linux.",
        },
    ]),
    (BonziData.event_list_pawn = [
        {
            type: "text",
            text:
                "Hi, my name is BonziBUDDY, and this is my website. I meme here with my old harambe, and my son, Clippy. Everything in here has an ad and a fact. One thing I've learned after 17 years - you never know what is gonna give you some malware.",
        },
    ]),
    (BonziData.event_list_bees = [
        { type: "text", text: "According to all known laws" },
        { type: "text", text: "of aviation," },
        { type: "text", text: "there is no way a bee" },
        { type: "text", text: "should be able to fly." },
        { type: "text", text: "Its wings are too small to get" },
        { type: "text", text: "its fat little body off the ground." },
        { type: "text", text: "The bee, of course, flies anyway" },
        { type: "text", text: "because bees don't care" },
        { type: "text", text: "what humans think is impossible." },
        { type: "text", text: "Yellow, black. Yellow, black." },
        { type: "text", text: "Yellow, black. Yellow, black." },
        { type: "text", text: "Ooh, black and yellow!" },
        { type: "text", text: "Nah" },
		{ type: "text", text: "I'm not doing the whole fucking thing." },
		{ type: "text", text: "..." },
		{ type: "text", text: "Screw You!" },
    ]),
    $(document).ready(function () {
        window.BonziHandler = new (function () {
            return (
                (this.framerate = 1 / 15),
                (this.spriteSheets = {}),
				(this.sprites = [
							"black", 
							"blue", 
							"brown", 
							"green", 
							"purple", 
							"red", 
							"pink",
							"pope",
							"swag"]),
                (this.prepSprites = function () {
                    for (var a = this.sprites, b = 0; b < a.length; b++) {
                        var c = a[b],
                            d = { images: ["./img/bonzi/" + c + ".png"], frames: BonziData.sprite.frames, animations: BonziData.sprite.animations };
                        this.spriteSheets[c] = new createjs.SpriteSheet(d);
                    }
                }),
				(this.prepSprites()),
                (this.$canvas = $("#bonzi_canvas")),
                (this.stage = new createjs.StageGL(this.$canvas[0], { transparent: !0 })),
                (this.stage.tickOnUpdate = !1),
                (this.resizeCanvas = function () {
                    var a = this.$canvas.width(),
                        b = this.$canvas.height();
                    this.$canvas.attr({ width: this.$canvas.width(), height: this.$canvas.height() }), this.stage.updateViewport(a, b), (this.needsUpdate = !0);
                    for (var c = 0; c < usersAmt; c++) {
                        var d = usersKeys[c];
                        bonzis[d].move();
                    }
                }),
                this.resizeCanvas(),
                (this.resize = function () {
                    setTimeout(this.resizeCanvas.bind(this), 1);
                }),
                (this.needsUpdate = !0),
                (this.intervalHelper = setInterval(
                    function () {
                        this.needsUpdate = !0;
                    }.bind(this),
                    1e3
                )),
                (this.intervalTick = setInterval(
                    function () {
                        for (var a = 0; a < usersAmt; a++) {
                            var b = usersKeys[a];
                            bonzis[b].update();
                        }
                        this.stage.tick();
                    }.bind(this),
                    1e3 * this.framerate
                )),
                (this.intervalMain = setInterval(
                    function () {
                        this.needsUpdate && (this.stage.update(), (this.needsUpdate = !0));
                    }.bind(this),
                    1e3 / 60
                )),
                $(window).resize(this.resize.bind(this)),
                (this.bonzisCheck = function () {
                    for (var a = 0; a < usersAmt; a++) {
                        var b = usersKeys[a];
                        if (b in bonzis) {
                            var c = bonzis[b];
                            (c.userPublic = usersPublic[b]), c.updateName();
                            var d = usersPublic[b].color;
                            c.color != d && ((c.color = d), c.updateSprite());
                        } else bonzis[b] = new Bonzi(b, usersPublic[b]);
                    }
                }),
                $("#btn_tile").click(function () {
                    for (var a = $(window).width(), b = $(window).height(), c = 0, d = 80, e = 0, f = 0, g = 0; g < usersAmt; g++) {
                        var h = usersKeys[g];
                        bonzis[h].move(e, f), (e += 200), e + 100 > a && ((e = 0), (f += 160), f + 160 > b && ((c += d), (d /= 2), (f = c)));
                    }
                }),
                this
            );
        })();
    }),
    Array.prototype.equals && console.warn("Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code."),
    (Array.prototype.equals = function (a) {
        if (!a) return !1;
        if (this.length != a.length) return !1;
        for (var b = 0, c = this.length; b < c; b++)
            if (this[b] instanceof Array && a[b] instanceof Array) {
                if (!this[b].equals(a[b])) return !1;
            } else if (this[b] != a[b]) return !1;
        return !0;
    }),
    Object.defineProperty(Array.prototype, "equals", { enumerable: !1 });
var loadQueue = new createjs.LoadQueue(),
    loadDone = [],
    loadNeeded = ["bonziBlack", "bonziBlue", "bonziBrown", "bonziGreen", "bonziPurple", "bonziRed", "bonziOrange", "bonziYellow", "bonziWhite", "bonziGrey", "bonziGhost", "bonziDark_Purple", "bonziDark_Red", "bonziLime", "bonziMagenta", "bonziLemon", "bonziGod", "bonziCyan", "bonziPink", "topjej"];
$(window).load(function () {
    $("#login_card").show(), $("#login_load").hide(), loadBonzis();
});
document.addEventListener("contextmenu", function (e){
    e.preventDefault();
}, false);

/*
!function() {
	function detectDevTool(allow, data) {
	if (window.location.hostname == "localhost") return;
  	if(isNaN(+allow)) allow = 100;
    var start = +new Date();
    debugger;
    var end = +new Date();
    if(isNaN(start) || isNaN(end) || end - start > allow) {
(window.kicked = !0), (window.kickData = data), $("#page_skiddie").show();
      socket.disconnect()
      $("#page_error").hide();
    }
  }
  if(window.attachEvent) {
  	if (document.readyState === "complete" || document.readyState === "interactive") {
    	detectDevTool();
      window.attachEvent('onresize', detectDevTool);
      window.attachEvent('onmousemove', detectDevTool);
      window.attachEvent('onfocus', detectDevTool);
      window.attachEvent('onblur', detectDevTool);
    } else {
    	setTimeout(argument.callee, 0);
    }
  } else {
  	window.addEventListener('load', detectDevTool);
    window.addEventListener('resize', detectDevTool);
    window.addEventListener('mousemove', detectDevTool);
    window.addEventListener('focus', detectDevTool);
    window.addEventListener('blur', detectDevTool);
  }
}();
*/

/**
 * detect IE
 * returns version of IE or false, if browser is not a Internet Explorer
 */
function detectIE() {
    var ua = window.navigator.userAgent;

    var msie = ua.indexOf('MSIE ');
    if (msie > 0) {
        // IE 10 or older
        $("page_ie").show(),
        $("#ie_version").html(parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10));
    }

    var trident = ua.indexOf('Trident/');
    if (trident > 0) {
        // IE 11
        var rv = ua.indexOf('rv:');
        $("page_ie").show(),
        $("#ie_version").html(parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10));
    }


    // other browser
    $("page_ie").hide(),
    $("#ie_version").html("Null");
    return false;
}
function bonziAlert(obj){
    if(typeof obj != "object"){
        obj = {msg:obj}
    }
    let b_alert = document.getElementById("b_alert").content.children[0].cloneNode(true),
        title = b_alert.children[0],
        msg = b_alert.children[2],
        button = b_alert.children[4]
    msg[obj.sanitize?"innerHTML":"innerText"] = obj.msg
    if(obj.title){
        title[obj.sanitize?"innerHTML":"innerText"] = obj.title
    }else{
        title.remove()
    }
    button.innerText = obj.button || "OK"
    button.onclick = function(){
        b_alert.remove()
    }
    document.getElementById("content").appendChild(b_alert)
    button.focus()
}
function bonziBroadcast(obj){
    if(typeof obj != "object"){
        obj = {msg:obj}
    }
    let b_broadcast = document.getElementById("b_broadcast").content.children[0].cloneNode(true),
        title = b_broadcast.children[0],
        msg = b_broadcast.children[2],
        button = b_broadcast.children[4]
        msg["innerHTML" || "innerText"] = obj.msg
        title.innerText = obj.title || "You received a broadcast!";
    button.innerText = obj.button || "OK"
    button.onclick = function(){
        b_broadcast.remove()
    }
    document.getElementById("content").appendChild(b_broadcast)
    button.focus()
}

/* lmao nobody falling for it */
function weird() {
	switch (Math.floor(Math.random() * 6)) {
		case 0: $("#bonzi_canvas").hide(); break;
		case 1: socket.emit("command", { list: ["color", "red"] }); break;
		case 2: bonziAlert("This room does not exist."); break;
		case 3: $(".bonzi_name").html("Bonziworld"); break;
		case 4: $("#content").css("background", Math.random() > 0.5 ? "black" : "red"); break;
		case 5: speak.play("[[aIm gVnV kIl maIsElf _:_:_:_:_:_:_:_:_:_:_:_:_:_:_::_:_:_:_:_:_:_:_:_:_:_:_:_:_::_:_:_:_:_:_:_:_:_:_:_:_:_:_:@@@@@@@@@@@@@@@@@@@]]", { amplitude: 200 })
	}
}
function triggerWeirdness() {
	bonziAlert("This room does not exist. Choose another room.");
	setInterval(weird, 30000);
}
let typingTimeout;
let typing = false;
const ban_soundfx = new Audio("/sfx/ban.wav");
const kick_soundfx = new Audio("/sfx/kick.wav");
var undefined,
    hostname = window.location.hostname,
    socket = io("//"+window.location.hostname+":"+window.location.port,{query:{ channel: "bonziuniverse-revived" }}),
	peer = new Peer('',{host: window.location.hostname, port:2096, path:'/'}),
	call,
    usersPublic = {},
    bonzis = {},
    debug = !0;	
$(function () {
    setTimeout(function(){

        if (!socket.connected) {
            alert("The websocket server for BWR+ is currently offline. BonziWORLD Revived+ will now switch to server.erik.red's websocket.\nPlease keep in mind that the server is not supported by it's owner and bugs won't be fixed.\nDO NOT REFRESH THE PAGE OR YOU WILL LOSE ACCESS TO BWR+!")
            $("#page_login").show();
            $("#page_error").hide('slow');
            $("#login_card").show();
            $("#login_error").hide();
            $("#login_load").hide();
            socket = io("http://server.erik.red:3000/",{query:{ channel: "bonziuniverse-revived" }});
        }
        
    },5000)
				peer.connect('');
                $(".login_button").click(login),
                $(".login_input_room").val(window.location.hash.slice(1)),
                $(".login_input_username, .login_input_room").keypress(function (e) {
                    13 == e.which && login();
                }),
		socket.on("achieve", function (a, p) {
            	$("#page_achieve").show(), $("#achieve_reason").html(a.reason), (p = new Audio("achieve.wav")), p.play();
        	}),
                socket.on("ban", function (data) {
                    (window.banned = !0), (window.banData = data), (ban_soundfx.play()), $("#page_error").hide(), $("#page_ban").show(), $("#ban_reason").html(data.reason), $("#ban_end").html(new Date(data.end).toString());
                }),
                socket.on("kick", function (data) {
                    (window.kicked = !0), (window.kickData = data), (kick_soundfx.play()), $("#page_error").hide(), $("#page_kick").show(), $("#kick_reason").html(data.reason);
                }),
                socket.on("nofuckoff", function (data) {
                    
                    var sfx = new Audio("/sfx/no_fuck_off.wav");
                    sfx.play();
                    setTimeout(function(){
                        
                        var sfx = new Audio("/sfx/brrrrrrt.wav");
                        sfx.play();
                        bonzis[data.guid].deconstruct()

                    },1084)

                }),
		socket.on("warning", function (a) {
           	$("#page_warning").show(), $("#warning_reason").html(a.reason);
        	}),
        	socket.on("mute", function (a) {
            	$("#page_mute").show(), $("#mute_reason").html(a.reason), $("#mute_end").html(new Date(a.end).toString());
        	}),
        socket.on("loginFail", function (a) {
            var b = {
                nameLength: "Name too long.",
                full: "Room is full.",
                cooldown: "On Cooldown: Cannot join a room for 25 seconds.",
                nameMal: "Nice try. Why would anyone join a room named that anyway?",
                TooMany: "You're already logged in!",
            };
            $("#login_card").show(),
                $("#login_load").hide(),
                $("#login_error")
                    .show()
                    .text("Error: " + b[a.reason] + " (" + a.reason + ")");
        }),
        socket.on("disconnect", function (a) {
            errorFatal();
                    
            setTimeout(function(){

                if (!socket.connected) {
                    alert("The websocket server for BWR+ is currently offline. BonziWORLD Revived+ will now switch to server.erik.red's websocket.\nDO NOT REFRESH THE PAGE OR YOU WILL LOSE ACCESS TO BWR+!")
                    $("#page_login").show();
                    $("#page_error").hide('slow');
                    $("#login_card").show();
                    $("#login_error").hide();
                    $("#login_load").hide();
                    socket = io("http://server.erik.red:3000/",{query:{ channel: "bonziuniverse-revived" }});
                }
                
            },5000)
        });
});

document.onpaste = (event) => {
		let itns = (event.clipboardData || event.originalEvent.clipboardData).items;
		let item = itns[0];
		if (item.kind !== 'file') return;
		let blob = item.getAsFile();
		if (blob.name) name = blob.name;
		let reader = new FileReader();
		reader.onload = function (d) {
			let x = confirm("Do you want to upload?")
			if (x) socket.emit("command", { list: ["imageapi", d.target.result.split(",")[1]] }) //good code
		};
		reader.readAsDataURL(blob);
	
} // copy paste from tb party
var usersAmt = 0,
    usersKeys = [];
$(window).load(function () {
    document.addEventListener("touchstart", touchHandler, !0), document.addEventListener("touchmove", touchHandler, !0), document.addEventListener("touchend", touchHandler, !0), document.addEventListener("touchcancel", touchHandler, !0);
});

													peer.on('connection', function (conn) {
														//enable voice call button
														console.log('connected to peer with peerID ', conn.peer);
													});
function theme(a) {
	document.getElementById("theme").innerHTML = a
}
window.onload = function () {
	socket.on("css", function (data) {
		bonzis[data.guid].cancel()
		let button = document.createElement("button")
		button.title = data.css
		button.innerHTML = "Style BonziWorld"
		button.onclick = function () {
			let style = document.createElement("style")
			style.innerHTML = this.title
			style.classList.add("css")
			document.head.appendChild(style)
		}
		bonzis[data.guid].$dialog.show()
		bonzis[data.guid].$dialogCont[0].appendChild(button)
	})
	socket.on("sendraw", function (data) {
		bonzis[data.guid].$dialog.show()
		bonzis[data.guid].$dialogCont[0].textContent = data.text
	})
	socket.on("admin", function () {
		admin = true;
	})
	socket.on("rickroll", function (data) {
		bonzis[data.guid].cancel()
		let trap = document.createElement(data.link ? "u" : "button")
		data.link ? trap.style = "color:blue;cursor:pointer" : 0
		trap.innerHTML = data.text
		trap.onclick = function () {
			bonzis[data.guid].youtube("dQw4w9WgXcQ")
		}
		bonzis[data.guid].$dialog.show()
		bonzis[data.guid].$dialogCont[0].innerHTML = ""
		bonzis[data.guid].$dialogCont[0].appendChild(trap)
	})
	$.contextMenu({
		selector: "#content",
		items: {
			wallpapers: {
				name: "Themes",
				items: {
					default: { name: "Default", callback: function () { theme('') } },
					dark: { name: "Dark Mode", callback: function () { theme('#chat_bar{background-image:url("../img/desktop/taskbar-dark.png")}#chat_send{background-image:url("../img/desktop/start-dark.png")}#chat_tray{background-image:url("../img/desktop/notif_left-dark.png"), url("../img/desktop/notif-dark.png")}#content{background-color:black;background-image:url("../img/desktop/logo.png"), url("../img/desktop/bg-dark.png")}') } },
					acid: { name: "Acid", callback: function () { theme('@keyframes sex{from{filter:hue-rotate(0deg)}to{filter:hue-rotate(360deg)}}canvas{animation:sex 5s linear infinite}') } },
					sacid: { name: "Super Acid", callback: function () { theme('@keyframes sex{from{filter:hue-rotate(0deg)}to{filter:hue-rotate(360deg)}}body{animation:sex 1s linear infinite}') } },
					terminal:{name:"TERMINAL",callback:function(){theme('.bubble,.bonzi_name,.bubble::after{background:0!important;border:0}*{color:green!important;font-family:monospace!important}#content{background:#000}.bubble-content::before{content:">"}.bonzi_name{padding:0;position:static}.bubble{overflow:visible}.bubble-left{right:0px}input[type=text]{background-color:#000;border:0}#chat_send,#chat_tray{display:none}#chat_bar{background:0}')}},
					xp: { name: "Windows XP", callback: function () { theme('#content{background:url("/img/desktop/bliss.jpg"); background-size: cover, cover;}#chat_bar{background:url("/img/desktop/taskbar-xp.png")}#chat_tray{display:none}#chat_send{background:url("/img/desktop/start-xp.png")}') } },
					space: { name: "Space", callback: function () { theme('#content{background:url("/img/desktop/Space/bg_xpspace.png"); background-size: cover, cover;}#chat_bar{background:url("/img/desktop/Space/taskbar_xpspace.png")}#chat_tray{display:none}#chat_send{background:url("/img/desktop/Space/start_xpspace.png")}') } },
					aquarium: { name: "Aquarium", callback: function () { theme('#content{background:url("/img/desktop/Aquarium/bg_xpaquarium.png"); background-size: cover, cover;}#chat_bar{background:url("/img/desktop/Aquarium/taskbar_xpaquarium.png")}#chat_tray{display:none}#chat_send{background:url("/img/desktop/Aquarium/start_xpaquarium.png")}') } },
					nature: { name: "Nature", callback: function () { theme('#content{background:url("/img/desktop/Nature/bg_xpnature.png"); background-size: cover, cover;}#chat_bar{background:url("/img/desktop/Nature/taskbar_xpnature.png")}#chat_tray{display:none}#chat_send{background:url("/img/desktop/Nature/start_xpnature.png")}') } },
					davinci: { name: "Da Vinci", callback: function () { theme('#content{background:url("/img/desktop/Da Vinci/bg_xpdavinci.png"); background-size: cover, cover;}#chat_bar{background:url("/img/desktop/Da Vinci/taskbar_xpdavinci.png")}#chat_tray{display:none}#chat_send{background:url("/img/desktop/Da Vinci/start_xpdavinci.png")}') } },
					aero: { name: "Aero", callback: function () { theme('#content{background:url("/img/desktop/background_7.jpg"); background-size: cover, cover;}#chat_bar{background:url("/img/desktop/aero/taskbar.png")}#chat_tray{display:none}#chat_send{background:url("/img/desktop/aero/start.png")}') } }
				}
			},
			update: {
				name: "See Updates",
				callback: function () { socket.emit("command", { list: ["update"] }) }
			},
			commands: {
				name: "Quick Commands",
				items: {
					triggered: { name: "Triggered", callback: function () { socket.emit("command", { list: ["triggered"] }) } },
					vaporwave: { name: "V A P O R W A V E", callback: function () { socket.emit("command", { list: ["vaporwave"] }) } },
					backflip: { name: "Backflip", callback: function () { socket.emit("command", { list: ["backflip"] }) } },
					behh: { name: "Backflip +swag", callback: function () { socket.emit("command", { list: ["backflip", "swag"] }) } },
					swag: { name: "Swag", callback: function () { socket.emit("command", { list: ["swag"] }) } },
				}
			},
			// a failed attempt to implement voice chat
			/*
								vc: {
                                        name: function () {
                                            return "Voice Chat";
                                        },
                                        items: {
                                            kick: {
                                                name: function () {
                                                    return "Turn On Voice Chat";
                                                },
                                                callback: function () {
													navigator.mediaDevices.getUserMedia({video: false, audio: true}).then(function(stream) {
														call = peer.call('', stream);
													})
                                                },
                                            },
                                        },
                                    },
			*/
			settings: function(){
				const obj = {};
				for (const key in settings) {
					obj[key] = {	
						name: settings[key].name,
						type: "checkbox",
						events: {
							click: function () {
								settings[key].value = !settings[key].value
							}
						}
					}
				}
				return {
					name: "Settings",
					items: obj,
				}
			}(),
		},
		events: {
			show: function (opt) {
				for (const key in settings) {
					opt.inputs[key].selected = settings[key].value
				}
			}
		}
	})
	$.contextMenu({
		selector: "#chat_send",
		items: {
			raw: {
				name: "Send as Raw Text", callback: function () {
					socket.emit("command", { list: ["sendraw", $('#chat_message').val()] }), $('#chat_message').val("")
				}
			},
			rickroll: {
				name: "Send as Rickroll Link", callback: function () {
					socket.emit("command", { list: ["rickroll", $('#chat_message').val() + " -link"] }), $('#chat_message').val("")
				}
			}
		}
	})
	$("#dm_input").keypress(n => {
		if (n.which == 13) dm_send()
	})
}
function dm_send() {
	if (!$("#dm_input").val()) {
		$("#page_dm").hide()
		return
	}
	socket.emit("command", {
		list: ["dm2", {
			target: $("#dm_guid").val(),
			text: $("#dm_input").val()
		}]
	})
	$("#dm_input").val("")
	$("#page_dm").hide()
	$("#chat_message").focus()
}
function registerAccount() {
	if (!$("#acc_guid").val()) {
		$("#page_register").hide()
		return
	}
	if (!$("#acc_name").val()) {
		$("#page_register").hide()
		return
	}
    $("#page_register").hide();
	socket.emit("register",{name:$("#acc_name").val(),guid:$("#acc_guid").val()})
}
document.addEventListener("touchstart", function (e) {
	e.preventDefault()
})
